import java.util.logging.Logger

import jenkins.model.*

import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import org.jenkinsci.plugins.plaincredentials.impl.*
import hudson.util.Secret

Logger logger = Logger.getLogger("")

def new_token = [
    'id': '{{ jenkins_github_token["id"] }}',
    'secret_text': '{{ jenkins_github_token["secret_text"] }}',
    'description': '{{ jenkins_github_token["description"] }}'
]

def new_creds_github = [
    'id': '{{ jenkins_github_token["id"] }}_login',
    'secret_text': '{{ jenkins_github_token["secret_text"] }}',
    'description': 'github credentials',
    'userName': '{{ jenkins_github_username }}'
]

def cur_creds = [:]
com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
  StringCredentialsImpl.class,
  Jenkins.instance,
  null,
  null
).each { c ->
  cur_creds[c.id] = c
}

// cleanup
cur_creds.each { cid, c ->
  if (new_token['id'] == cid){
    SystemCredentialsProvider.getInstance().getStore().removeCredentials(Domain.global(), c)
  }
}

Credentials new_cred = (Credentials) new StringCredentialsImpl(CredentialsScope.GLOBAL, new_token['id'], new_token['description'], Secret.fromString(new_token['secret_text']))

if(cur_creds.containsKey(new_token['id'])){
  SystemCredentialsProvider.getInstance().getStore().updateCredentials(Domain.global(), cur_creds[new_token['id']], new_cred)
} else {
  SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), new_cred)
}

Credentials new_github_creds = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, new_creds_github['id'], new_creds_github['description'], new_creds_github['userName'], new_creds_github['secret_text'])

if(cur_creds.containsKey(new_creds_github['id'])){
  SystemCredentialsProvider.getInstance().getStore().updateCredentials(Domain.global(), cur_creds[new_creds_github['id']], new_github_creds)
} else {
  SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), new_github_creds)
}

logger.info('Token and Username/Password credentials successfully created')